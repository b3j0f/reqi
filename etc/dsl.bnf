(* keywords definition *)

@@keyword :: TRUE FALSE
@@keyword :: AS
@@keyword :: NULL
@@keyword :: WHERE
@@keyword :: READ
@@keyword :: CREATE
@@keyword :: UPDATE
@@keyword :: DELETE

(* symbols definition *)

digit = /[0-9]/ ;
symbol = /[a-zA-Z]/ ;
characters = /\w*/ ;

(* basic type definition *)

@name
identifier = /[_a-zA-Z][a-zA-Z0-9_]*/ ;
string = '"' characters '"' | "'" characters "'" ;
natural = { digit }+ ;
sign = "+" | "-" ;
integer = [ sign ] natural ;
decimal = [ sign ] natural "." natural ;
boolean = "TRUE" | "FALSE" ;
null = "NULL" ;

value = string | integer | decimal | boolean | null ;
alias = identifier ;
aliased_property = alias "." identifier ;
conditional_operator = ">" | "<" | ">=" | "<=" | "=" | "!=" | "~=" ;
numerical_operator = "+" | "-" | "*" | "/" | "%" | "^" ;
property = identifier ;
system = identifier ;
model = identifier ;
model_property = [ model "." ] property ;
system_model = [ system "." ] model ;
system_property = [ [ system "." ] model "." ] property ;

model_reference = system_model | alias ;
property_reference = system_property | aliased_property ;

numerical_expression = property_reference numerical_operator expression_value ;
conditional_expression = property_reference conditional_operator expression_value ;

expression_value = value | function | property_reference | numerical_expression ;

expression = ("(" expression ")") | expression_value ;

function = system_property "(" ",".{ expression }+ ")";

filter = "WHERE" ( " AND " | " OR " ).{ conditional_expression }+ ;

update = "UPDATE" model_reference ( ( "SET" "{" property "=" expression_value "}" ) | ( "UNSET" ",".property ) ) [ where ] ;

read = "SELECT" ",".{ expression_value [ "AS" alias ] }+ "FROM" ",".{ system [ "AS" alias ] }+ [ filter ] ;

create = "CREATE" ",".( model_reference "{" ",".{ property "=" value_expression }* "}" ) [ filter ] ;

delete = "DELETE" ",".{ model_reference }+ [ where ] ;

crud = create | read | update | delete;

start = crud ;